package fi.bfy466.view;

import java.io.File;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.stage.FileChooser;
import fi.bfy466.MainApp;
import java.io.File;
import java.io.IOException;

/**
 * Controller for the root layout. Basic functionality: menu bar and frame for other elements.
 * @author bfy466
 *
 */


public class RootLayoutController {


    // Reference to the main application
    private MainApp mainApp;

    /**
     * Calling by main application to give a reference.
     *
     * @param mainApp
     */
    public void setMainApp(MainApp mainApp) {
        this.mainApp = mainApp;
    }

    /**
     * Creating an empty list of registers.
     */
    @FXML
    private void handleNew() {
        mainApp.getRegisterData().clear();
        mainApp.setRegisterFilePath(null);
    }

    /**
     * Opening a FileChooser to select a list to load.
     */
    @FXML
    private void handleOpen() {
        FileChooser fileChooser = new FileChooser();

        // Setting extension filter
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter(
                "XML files (*.xml)", "*.xml");
        fileChooser.getExtensionFilters().add(extFilter);

        // Showing open file dialog
        File file = fileChooser.showOpenDialog(mainApp.getPrimaryStage());

        if (file != null) {
            mainApp.loadRegisterDataFromFile(file);
        }
    }

    /**
     * Saving opened file with the list. If there is no open file, the "save as" dialog will be shown.
     */
    @FXML
    private void handleSave() {
        File registerFile = mainApp.getRegisterFilePath();
        if (registerFile != null) {
            mainApp.saveRegisterDataToFile(registerFile);
        } else {
            handleSaveAs();
        }
    }

    /**
     * Opening FileChooser to let the user select the file to save to.
     */
    @FXML
    private void handleSaveAs() {
		FileChooser fileChooser = new FileChooser();

		// Setting extension filter
		FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter(
				"XML files (*.xml)", "*.xml");
		fileChooser.getExtensionFilters().add(extFilter);

		// Showing save file dialog
		File file = fileChooser.showSaveDialog(mainApp.getPrimaryStage());

		if (file != null) {
			// Making sure that file has the correct extension
			if (!file.getPath().endsWith(".xml")) {
				file = new File(file.getPath() + ".xml");
			}
			mainApp.saveRegisterDataToFile(file);
		}
	}

    /**
     * Opening about dialog.
     */
    @FXML
    private void handleAbout() {
    	Alert alert = new Alert(AlertType.INFORMATION);
    	alert.setTitle("ModbusZoo");
    	alert.setHeaderText("About");
    	alert.setContentText("Author: Nikolai Zhukov\n bfy466");

    	alert.showAndWait();
    }

    /**
     * Closing the application.
     */
    @FXML
    private void handleExit() {
        System.exit(0);
    }

}
